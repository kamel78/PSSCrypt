// AES S-Box lookup table
pub const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

// AES Inverse S-Box lookup table
pub const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

// Round constants for key expansion (Aes128)
pub const RCON128: [u8; 11] = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

// AES Rcon values
pub const RCON256: [u8; 15] = [0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,];


/// Galois Field multiplication by 2
#[inline(always)]
pub fn gf_mul_2(a: u8) -> u8 {  if a & 0x80 != 0 {   (a << 1) ^ 0x1b} else {a << 1} }

/// Galois Field multiplication by 3
#[inline(always)]
pub fn gf_mul_3(a: u8) -> u8 {  gf_mul_2(a) ^ a }

#[inline(always)]
pub fn u128_to_state(value: u128) -> [[u8; 4]; 4] {
    let bytes = value.to_be_bytes();
    [   [bytes[0], bytes[4], bytes[8], bytes[12]],
        [bytes[1], bytes[5], bytes[9], bytes[13]],
        [bytes[2], bytes[6], bytes[10], bytes[14]],
        [bytes[3], bytes[7], bytes[11], bytes[15]],
    ]
}

#[inline(always)]
pub fn state_to_u128(state: &[[u8; 4]; 4]) -> u128 {
    let bytes = [ state[0][0], state[1][0], state[2][0], state[3][0],
                            state[0][1], state[1][1], state[2][1], state[3][1],
                            state[0][2], state[1][2], state[2][2], state[3][2],
                            state[0][3], state[1][3], state[2][3], state[3][3],
                         ];
    u128::from_be_bytes(bytes)
}

#[inline(always)]
pub fn shift_rows(state: &mut [[u8; 4]; 4]) {
    // Row 0: no shift
    // Row 1: left shift by 1
    let temp = state[1][0];
    state[1][0] = state[1][1];
    state[1][1] = state[1][2];
    state[1][2] = state[1][3];
    state[1][3] = temp;    
    // Row 2: left shift by 2
    let temp1 = state[2][0];
    let temp2 = state[2][1];
    state[2][0] = state[2][2];
    state[2][1] = state[2][3];
    state[2][2] = temp1;
    state[2][3] = temp2;
    // Row 3: left shift by 3 (or right shift by 1)
    let temp = state[3][3];
    state[3][3] = state[3][2];
    state[3][2] = state[3][1];
    state[3][1] = state[3][0];
    state[3][0] = temp;
}

#[inline(always)]
pub fn inv_shift_rows(state: &mut [[u8; 4]; 4]) {
    // Row 0: no shift
    // Row 1: right shift by 1
    let temp = state[1][3];
    state[1][3] = state[1][2];
    state[1][2] = state[1][1];
    state[1][1] = state[1][0];
    state[1][0] = temp;
    // Row 2: right shift by 2
    let temp1 = state[2][2];
    let temp2 = state[2][3];
    state[2][2] = state[2][0];
    state[2][3] = state[2][1];
    state[2][0] = temp1;
    state[2][1] = temp2;  
    // Row 3: right shift by 3 (or left shift by 1)
    let temp = state[3][0];
    state[3][0] = state[3][1];
    state[3][1] = state[3][2];
    state[3][2] = state[3][3];
    state[3][3] = temp;
}

#[inline(always)]
pub fn sub_bytes(state: &mut [[u8; 4]; 4]) {
    for row in state.iter_mut() {
                for byte in row.iter_mut() {*byte = SBOX[*byte as usize];}
            }
}

#[inline(always)]
pub fn inv_sub_bytes(state: &mut [[u8; 4]; 4]) {
    for row in state.iter_mut() {
        for byte in row.iter_mut() {    *byte = INV_SBOX[*byte as usize];}
            }
}


#[inline(always)]
pub fn mix_columns(state: &mut [[u8; 4]; 4]) {
    for col in 0..4 {
        let s0 = state[0][col];
        let s1 = state[1][col];
        let s2 = state[2][col];
        let s3 = state[3][col];       
        state[0][col] = gf_mul_2(s0) ^ gf_mul_3(s1) ^ s2 ^ s3;
        state[1][col] = s0 ^ gf_mul_2(s1) ^ gf_mul_3(s2) ^ s3;
        state[2][col] = s0 ^ s1 ^ gf_mul_2(s2) ^ gf_mul_3(s3);
        state[3][col] = gf_mul_3(s0) ^ s1 ^ s2 ^ gf_mul_2(s3);
    }
}
#[inline(always)]
pub fn inv_mix_columns(state: &mut [[u8; 4]; 4]) {
    for col in 0..4 {
        let s0 = state[0][col];
        let s1 = state[1][col];
        let s2 = state[2][col];
        let s3 = state[3][col];

        let s0_2 = gf_mul_2(s0);
        let s0_4 = gf_mul_2(s0_2);
        let s0_8 = gf_mul_2(s0_4);

        let s1_2 = gf_mul_2(s1);
        let s1_4 = gf_mul_2(s1_2);
        let s1_8 = gf_mul_2(s1_4);

        let s2_2 = gf_mul_2(s2);
        let s2_4 = gf_mul_2(s2_2);
        let s2_8 = gf_mul_2(s2_4);

        let s3_2 = gf_mul_2(s3);
        let s3_4 = gf_mul_2(s3_2);
        let s3_8 = gf_mul_2(s3_4);

        // Compute multiplications by {9, 11, 13, 14} efficiently
        let m0_9  = s0_8 ^ s0;
        let m0_11 = s0_8 ^ s0_2 ^ s0;
        let m0_13 = s0_8 ^ s0_4 ^ s0;
        let m0_14 = s0_8 ^ s0_4 ^ s0_2;

        let m1_9  = s1_8 ^ s1;
        let m1_11 = s1_8 ^ s1_2 ^ s1;
        let m1_13 = s1_8 ^ s1_4 ^ s1;
        let m1_14 = s1_8 ^ s1_4 ^ s1_2;

        let m2_9  = s2_8 ^ s2;
        let m2_11 = s2_8 ^ s2_2 ^ s2;
        let m2_13 = s2_8 ^ s2_4 ^ s2;
        let m2_14 = s2_8 ^ s2_4 ^ s2_2;

        let m3_9  = s3_8 ^ s3;
        let m3_11 = s3_8 ^ s3_2 ^ s3;
        let m3_13 = s3_8 ^ s3_4 ^ s3;
        let m3_14 = s3_8 ^ s3_4 ^ s3_2;

        state[0][col] = m0_14 ^ m1_11 ^ m2_13 ^ m3_9;
        state[1][col] = m0_9 ^ m1_14 ^ m2_11 ^ m3_13;
        state[2][col] = m0_13 ^ m1_9 ^ m2_14 ^ m3_11;
        state[3][col] = m0_11 ^ m1_13 ^ m2_9 ^ m3_14;
    }
}

#[inline(always)]
pub fn inv_mix_columns_0(state: &mut [[u8; 4]; 4]) {
    for col in 0..4 {
        let a = state[0][col];
        let b = state[1][col];
        let c = state[2][col];
        let d = state[3][col];        
        let a2 = gf_mul_2(a);
        let a4 = gf_mul_2(a2);
        let a8 = gf_mul_2(a4);        
        let b2 = gf_mul_2(b);
        let b4 = gf_mul_2(b2);
        let b8 = gf_mul_2(b4);        
        let c2 = gf_mul_2(c);
        let c4 = gf_mul_2(c2);
        let c8 = gf_mul_2(c4);        
        let d2 = gf_mul_2(d);
        let d4 = gf_mul_2(d2);
        let d8 = gf_mul_2(d4);
        let t1 = a8 ^ a4;
        let t2 = b8 ^ b2;
        let t3 = c8 ^ c4;
        let t4 = d8 ^ d;       
        state[0][col] = t1 ^ a2 ^ t2 ^ b ^ t3 ^ c ^ t4;
        state[1][col] = a8 ^ a ^ b8 ^ b4 ^ b2 ^ c8 ^ c2 ^ c ^ d8 ^ d4 ^ d;
        state[2][col] = t1 ^ a ^ b8 ^ b ^ c8 ^ c4 ^ c2 ^ d8 ^ d2 ^ d;
        state[3][col] = a8 ^ a2 ^ a ^ b8 ^ b4 ^ b ^ c8 ^ c ^ d8 ^ d4 ^ d2;
    }
}

#[inline(always)]
pub fn add_round_key(state: &mut [[u8; 4]; 4], round_key: &[u8; 16]) {
    for col in 0..4 {   for row in 0..4 {   state[row][col] ^= round_key[row + col * 4];    }}
}